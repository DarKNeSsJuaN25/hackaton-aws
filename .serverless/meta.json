{
  "/home/ubuntu/hackaton-aws/serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "/home/ubuntu/hackaton-aws/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "laredojuan25",
      "service": "api-diagrams",
      "provider": {
        "name": "aws",
        "runtime": "python3.12",
        "memorySize": 1024,
        "timeout": 30,
        "iam": {
          "role": "arn:aws:iam::352677750379:role/LabRole"
        },
        "layers": [
          "arn:aws:lambda:us-east-1:764866452798:layer:graphviz:9"
        ],
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "CrearUnderscoreerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/api-diagrams-dev-crear_er"
              }
            },
            "CrearUnderscoreerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-83fa81fb-03e0",
                  "S3Key": "serverless/api-diagrams/dev/1750558115908-2025-06-22T02:08:35.908Z/api-diagrams.zip"
                },
                "Handler": "render_er.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "api-diagrams-dev-crear_er",
                "MemorySize": 1024,
                "Timeout": 30,
                "Role": "arn:aws:iam::352677750379:role/LabRole",
                "Layers": [
                  "arn:aws:lambda:us-east-1:764866452798:layer:graphviz:9"
                ]
              },
              "DependsOn": [
                "CrearUnderscoreerLogGroup"
              ]
            },
            "CrearUnderscoreerLambdaVersionO5FtIlehx7wexvIevAzAgylGR1ufvGW9ksUc8bedc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CrearUnderscoreerLambdaFunction"
                },
                "CodeSha256": "Zf8WIrgeFGjD1tWPPzzsmFomJKXyUQk/vrC0DAg9Qvs="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-api-diagrams",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceDiagrama": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "diagrama",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDiagramaCrearDasher": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceDiagrama"
                },
                "PathPart": "crear-er",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDiagramaCrearDasherOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDiagramaCrearDasher"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDiagramaCrearDasherPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDiagramaCrearDasher"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CrearUnderscoreerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "PassthroughBehavior": "NEVER",
                  "RequestTemplates": {
                    "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                    "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                  },
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "SelectionPattern": "",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "400",
                      "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "401",
                      "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "403",
                      "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "404",
                      "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "422",
                      "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "500",
                      "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "502",
                      "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "504",
                      "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    }
                  ]
                },
                "MethodResponses": [
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "200"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "400"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "401"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "403"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "404"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "422"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "500"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "502"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "504"
                  }
                ]
              },
              "DependsOn": [
                "CrearUnderscoreerLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1750558106235": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodDiagramaCrearDasherOptions",
                "ApiGatewayMethodDiagramaCrearDasherPost"
              ]
            },
            "CrearUnderscoreerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CrearUnderscoreerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-83fa81fb-03e0",
              "Export": {
                "Name": "sls-api-diagrams-dev-ServerlessDeploymentBucketName"
              }
            },
            "CrearUnderscoreerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CrearUnderscoreerLambdaVersionO5FtIlehx7wexvIevAzAgylGR1ufvGW9ksUc8bedc"
              },
              "Export": {
                "Name": "sls-api-diagrams-dev-CrearUnderscoreerLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-api-diagrams-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "crear_er": {
          "handler": "render_er.lambda_handler",
          "events": [
            {
              "http": {
                "path": "diagrama/crear-er",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS",
                "request": {
                  "passThrough": "NEVER"
                },
                "response": {
                  "statusCodes": {
                    "200": {
                      "pattern": ""
                    },
                    "400": {
                      "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                    },
                    "401": {
                      "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                    },
                    "403": {
                      "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                    },
                    "404": {
                      "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                    },
                    "422": {
                      "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                    },
                    "500": {
                      "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                    },
                    "502": {
                      "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                    },
                    "504": {
                      "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                    }
                  }
                }
              }
            }
          ],
          "name": "api-diagrams-dev-crear_er",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "CrearUnderscoreerLambdaVersionO5FtIlehx7wexvIevAzAgylGR1ufvGW9ksUc8bedc"
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.12",
      "memorySize": 1024,
      "timeout": 30,
      "iam": {
        "role": "arn:aws:iam::352677750379:role/LabRole"
      },
      "layers": [
        "arn:aws:lambda:us-east-1:764866452798:layer:graphviz:9"
      ],
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "CrearUnderscoreerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-diagrams-dev-crear_er"
            }
          },
          "CrearUnderscoreerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-83fa81fb-03e0",
                "S3Key": "serverless/api-diagrams/dev/1750558115908-2025-06-22T02:08:35.908Z/api-diagrams.zip"
              },
              "Handler": "render_er.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "api-diagrams-dev-crear_er",
              "MemorySize": 1024,
              "Timeout": 30,
              "Role": "arn:aws:iam::352677750379:role/LabRole",
              "Layers": [
                "arn:aws:lambda:us-east-1:764866452798:layer:graphviz:9"
              ]
            },
            "DependsOn": [
              "CrearUnderscoreerLogGroup"
            ]
          },
          "CrearUnderscoreerLambdaVersionO5FtIlehx7wexvIevAzAgylGR1ufvGW9ksUc8bedc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CrearUnderscoreerLambdaFunction"
              },
              "CodeSha256": "Zf8WIrgeFGjD1tWPPzzsmFomJKXyUQk/vrC0DAg9Qvs="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-api-diagrams",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceDiagrama": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "diagrama",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDiagramaCrearDasher": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDiagrama"
              },
              "PathPart": "crear-er",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDiagramaCrearDasherOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDiagramaCrearDasher"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDiagramaCrearDasherPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDiagramaCrearDasher"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CrearUnderscoreerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "CrearUnderscoreerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1750558106235": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodDiagramaCrearDasherOptions",
              "ApiGatewayMethodDiagramaCrearDasherPost"
            ]
          },
          "CrearUnderscoreerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CrearUnderscoreerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-83fa81fb-03e0",
            "Export": {
              "Name": "sls-api-diagrams-dev-ServerlessDeploymentBucketName"
            }
          },
          "CrearUnderscoreerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CrearUnderscoreerLambdaVersionO5FtIlehx7wexvIevAzAgylGR1ufvGW9ksUc8bedc"
            },
            "Export": {
              "Name": "sls-api-diagrams-dev-CrearUnderscoreerLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-api-diagrams-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "An error occurred: CrearUnderscoreerLambdaFunction - Resource handler returned message: \"User: arn:aws:sts::352677750379:assumed-role/voclabs/user2700333=Juan_Laredo is not authorized to perform: lambda:GetLayerVersion on resource: arn:aws:lambda:us-east-1:764866452798:layer:graphviz:9 because no resource-based policy allows the lambda:GetLayerVersion action (Service: Lambda, Status Code: 403, Request ID: 67cc0791-0d95-46e3-b826-1d858696e89d) (SDK Attempt Count: 1)\" (RequestToken: c44e9dfd-afc1-f6c2-3ae7-2bb3d96dc137, HandlerErrorCode: AccessDenied).",
      "stack": "ServerlessError2: An error occurred: CrearUnderscoreerLambdaFunction - Resource handler returned message: \"User: arn:aws:sts::352677750379:assumed-role/voclabs/user2700333=Juan_Laredo is not authorized to perform: lambda:GetLayerVersion on resource: arn:aws:lambda:us-east-1:764866452798:layer:graphviz:9 because no resource-based policy allows the lambda:GetLayerVersion action (Service: Lambda, Status Code: 403, Request ID: 67cc0791-0d95-46e3-b826-1d858696e89d) (SDK Attempt Count: 1)\" (RequestToken: c44e9dfd-afc1-f6c2-3ae7-2bb3d96dc137, HandlerErrorCode: AccessDenied).\n    at file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1175:828\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async AwsDeploy.update (file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1175:25279)\n    at async aws:deploy:deploy:updateStack (file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1186:7908)\n    at async PluginManager.runHooks (file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1377:9870)\n    at async PluginManager.invoke (file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1377:10639)\n    at async PluginManager.spawn (file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1377:11000)\n    at async PluginManager.runHooks (file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1377:9870)\n    at async PluginManager.invoke (file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1377:10639)\n    at async PluginManager.run (file:///home/ubuntu/.serverless/releases/4.17.1/package/dist/sf-core.js:1377:11373)",
      "code": "AWS_CLOUD_FORMATION_UPDATE_STACK_INTERNAL_INSUFFICIENT_PERMISSIONS"
    },
    "serviceRawFile": "org: laredojuan25\nservice: api-diagrams\n\nprovider:\n  name: aws\n  runtime: python3.12\n  memorySize: 1024\n  timeout: 30\n  iam:\n    role: arn:aws:iam::352677750379:role/LabRole\n  layers:\n    - arn:aws:lambda:us-east-1:764866452798:layer:graphviz:9\n\nfunctions:\n  crear_er:\n    handler: render_er.lambda_handler\n    events:\n      - http:\n          path: /diagrama/crear-er\n          method: post\n          cors: true\n          integration: lambda\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "9ca64c58-5fab-4188-a4b9-ed9f8512e673",
    "orgName": "laredojuan25",
    "userId": "pzswsWdVkQfcTwGrTT",
    "userName": "laredojuan25",
    "serviceProviderAwsAccountId": "352677750379",
    "serviceProviderAwsCfStackName": "api-diagrams-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:352677750379:stack/api-diagrams-dev/86ae0a00-4f0c-11f0-97d7-0e3dee8c2b11",
    "serviceProviderAwsCfStackCreated": "2025-06-22T01:59:26.750Z",
    "serviceProviderAwsCfStackUpdated": "2025-06-22T02:06:19.182Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "CrearUnderscoreerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:352677750379:function:api-diagrams-dev-crear_er:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-api-diagrams-dev-CrearUnderscoreerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://3oc2hca768.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-api-diagrams-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-83fa81fb-03e0",
        "ExportName": "sls-api-diagrams-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}